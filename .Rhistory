names(x.tab.df) <- c("y", "Factor", "Group")
x.tab
rep(as.vector(levels(dat$Group))
, length(levels(dat[,Factor])))
names(x.tab)
rep(as.vector(levels(dat$Group)), length(levels(dat[,Factor]))),
rep(names(x.tab), n))
rep(as.vector(levels(dat$Group)), length(levels(dat[,Factor])))
(n)
melt(x.tab)
x.tab.df <- melt(x.tab)
names(x.tab.df) <- c("Factor", "y", "Group")
#    names(x.tab.df) <- c("y", "Factor", "Group")
#   row.names(x.tab.df) <- NULL
x.tab.df$y <- as.numeric(as.vector(x.tab.df$y))
head(x.tab.df)
tab <- tapply(x.tab.df$y, x.tab.df$Group, function(x) x/sum(x))
tab
x.bp <- data.frame(cbind(unlist(tab), rep(names(tab), lapply(tab, length)),
rep(levels(dat$Group), length(tab))))
x.bp
x.tab
row.names(x.tab) <- unyr
unyr
row.names(x.tab) <- paste(unyr)
row.names(x.tab)
class(x.tab)
x.tab
x.tab <- list()
x.tab[[j]] <- data.frame(matrix(0, nrow = length(unyr), ncol = length(levels(x$Group))))
names(x.tab[[j]]) <- levels(dat$Group)
row.names(x.tab[[j]]) <- names(unyr)
x.tab
names(unyr)
row.names(x.tab[[j]]) <- paste(unyr)
x.tab
i <- 1
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 2
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 3
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
x.tab
#    unF <- levels(dat[,Factor])
#    x.tab <- list()
#    for(j in 1:length(unF)){
#      datF <- dat[dat[,Factor] == unF[j],]
#      x.tab[[j]] <- tapply(datF$W, datF$Group, sum)
#      x.tab[[j]][is.na(x.tab[[j]])] <- 0
#    }
names(x.tab) <- unF
x.tab
melt(x.tab)
x.tab[[1]]$Year <- unyr
x.tab
melt(x.tab)
x.tab <- list()
x.tab[[j]] <- data.frame(matrix(0, nrow = length(unyr), ncol = length(levels(x$Group))))
names(x.tab[[j]]) <- levels(dat$Group)
row.names(x.tab[[j]]) <- paste(unyr)
i <- 1
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 2
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 3
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
#    unF <- levels(dat[,Factor])
#    x.tab <- list()
#    for(j in 1:length(unF)){
#      datF <- dat[dat[,Factor] == unF[j],]
#      x.tab[[j]] <- tapply(datF$W, datF$Group, sum)
#      x.tab[[j]][is.na(x.tab[[j]])] <- 0
#    }
names(x.tab) <- unF
x.tab.df <- melt(x.tab)
x.tab
x.tab.df <- melt(x.tab)
names(x.tab.df) <- c("Factor", "y", "Group")
x.tab.df$Year <- rep(unyr, length(levels(dat$Group)))
x.tab.df
i
x.tab <- list()
x.tab[[j]] <- data.frame(matrix(0, nrow = length(unyr), ncol = length(levels(x$Group))))
names(x.tab[[j]]) <- levels(dat$Group)
row.names(x.tab[[j]]) <- paste(unyr)
i <- 1
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 2
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
i <- 3
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
x.tab
#    unF <- levels(dat[,Factor])
#    x.tab <- list()
#    for(j in 1:length(unF)){
#      datF <- dat[dat[,Factor] == unF[j],]
#      x.tab[[j]] <- tapply(datF$W, datF$Group, sum)
#      x.tab[[j]][is.na(x.tab[[j]])] <- 0
#    }
names(x.tab) <- unF
x.tab.df <- melt(x.tab)
names(x.tab.df) <- c("Factor", "y", "Group")
x.tab.df$Year <- rep(unyr, length(levels(dat$Group)))
x.tab.df
#    names(x.tab.df) <- c("y", "Factor", "Group")
#   row.names(x.tab.df) <- NULL
x.tab.df$y <- as.numeric(as.vector(x.tab.df$y))
tab <- tapply(x.tab.df$y, x.tab.df$Group, function(x) x/sum(x))
x.bp <- data.frame(cbind(unlist(tab), rep(names(tab), lapply(tab, length)),
rep(levels(dat$Group), length(tab))))
x.bp
tab
unlist(ab)
unlist(tab)
names(x.bp) <- c("y", "Factor", "Group")
x.bp$Year <- rep(unyr, length(levels(dat$Group)))
x.bp$y <- as.numeric(as.vector(x.bp$y))
x.bp$y[is.nan(x.bp$y)] <- 0
!is.null(prey.cols)
x.bp$Group <- factor(as.vector(x.bp$Group), levels = names(prey.cols))
x.bp
trel.def <- trellis.par.get("superpose.polygon")
trel.def$col <- prey.cols
trellis.par.set("superpose.polygon", trel.def)
bc.grp <- barchart(y ~ Factor, groups = x.bp$Group,  data = x.bp, stack = TRUE,
scales = list(x = list(rot = 45)),
auto.key = list(space = "right"), ylim = c(0,1),
main = paste("Composition of", Species, ": ", unyr[i]), ylab = "Proportion")
bc.grp
bc.yr
x.tab <- list()
i <- 1
dat <- x[x$Year == unyr[i] & !is.na(x$Year),]
unF <- levels(dat[,Factor])
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]][i,] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][i,][is.na(x.tab[[j]][i,])] <- 0
datF <- dat[dat[,Factor] == unF[j],]
x.tab[[j]] <- tapply(datF$W, datF$Group, sum)
x.tab[[j]][is.na(x.tab[[j]])] <- 0
x.tab
#    unF <- levels(dat[,Factor])
#    x.tab <- list()
#    for(j in 1:length(unF)){
#      datF <- dat[dat[,Factor] == unF[j],]
#      x.tab[[j]] <- tapply(datF$W, datF$Group, sum)
#      x.tab[[j]][is.na(x.tab[[j]])] <- 0
#    }
names(x.tab) <- unF
x.tab
x.tab.df <- melt(x.tab)
x.tab.df
names(x.tab.df) <- c("Factor", "y", "Group")
#    names(x.tab.df) <- c("y", "Factor", "Group")
#   row.names(x.tab.df) <- NULL
x.tab.df$y <- as.numeric(as.vector(x.tab.df$y))
tab <- tapply(x.tab.df$y, x.tab.df$Group, function(x) x/sum(x))
x.bp <- data.frame(cbind(unlist(tab), rep(names(tab), lapply(tab, length)),
rep(levels(dat$Group), length(tab))))
names(x.bp) <- c("y", "Factor", "Group")
#x.bp$Year <- rep(unyr, length(levels(dat$Group)))
x.bp$y <- as.numeric(as.vector(x.bp$y))
x.bp$y[is.nan(x.bp$y)] <- 0
!is.null(prey.cols)
x.bp$Group <- factor(as.vector(x.bp$Group), levels = names(prey.cols))
x.bp
bc.grp <- barchart(y ~ Factor, groups = x.bp$Group,  data = x.bp, stack = TRUE,
scales = list(x = list(rot = 45)),
auto.key = list(space = "right"), ylim = c(0,1),
main = paste("Composition of", Species, ": ", unyr[i]), ylab = "Proportion")
b.grp
bc.grp
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
sum.x <- summary(x)
sum.x2 <- data.frame(nobs = nrow(x), npred = ifelse(is.null(PredIDno), NA, length(unique(x[,PredIDno]))),
nprey = length(levels(x$Group)))
plotSpComp
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
names(explore.diet)
print(explore.diet$plotSpComp) # Species composition
print(explore.diet$smplot)
explore.diet$expl2
# Assigning prey colours for default palette
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
val <- apc(x = dietPP, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with prey taxa codes
PreyTaxonSort
levels(dietPP$Group)
# Assigning prey colours for default palette
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = dietPP, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/apc.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
# Create a predator column
dietPP$Predator <- as.factor(rep("YFT", nrow(dietPP)))
head(dietPP)
# Assigning prey colours for default palette
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = dietPP, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
any(is.na(preyID))
preyID
x$Group
preynms$Group
head(dietPP)
PreyTaxonSort
head(yftdiet)
head(dietPP)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with "Group" assigned prey taxa codes
head(dietPP)
source('C:/Offline_Files/Github_Repos/diet/R/apc.r')
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with "Group" assigned prey taxa codes
head(dietPP)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with "Group" assigned prey taxa codes
head(dietPP)
write.csv(yftPPraw, file = "yftPPraw.csv", row.names = FALSE)
yftpp2 <- read.pp(filenm = "yftPPraw.csv",
labels = list(PredatorL = "TripSetPredNo", TripSetL = "TripSetNo",
SpeciesL = "Family", FullnessL = "Fullness",
DateL = "Date", WeightL = "PropW", PreyGrpL = "Family"),
Datef = "%m/%d/%Y", p = 0.01,
Xvars = c("Lat", "Lon", "Year", "Quarter", "Length", "SST"))
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with prey taxa codes
head(dietPP)
PreyTaxonSort
head(hftpp2)
head(yftPPraw)
head(yftpp1)
head(yftpp2)
head(dietPP)
names(val)
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
# Assigning prey colours for default palette
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with Group assigned prey taxa codes
head(dietPP)
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY, uniform = TRUE)
library(rpart.plot)
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY, uniform = TRUE)
summary(yft.dp)
print(yft.dp, setID = "TripSetNo")
yft.pr <- prune(yft.dp, se = 1)
plot(yft.pr, node.cols = node.colsY)
plot(yft.pr, node.cols = node.colsY, uniform = FALSE)
# Variable importance ranking
vi <- importance(yft.pr)
# Maps of diversity
# Diversity index
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon")
D
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1,
mapcol = "gold3")
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1,
mapcol = "gold3")
library(grid)
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1,
mapcol = "gold3")
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1,
mapcol = "gold3")
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1,
mapcol = "gold3")
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1)
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1)
# Forming predictions - ERROR
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
yft.predator
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
yft.pred.obs
head(yft.predator)
dim(yft.predator)
head(yft.pred.obs)
dim(yft.pred.obs)
summary(yft.predator)
had(yftdiet)
head(yftdiet)
length(unique(yftdiet$TripSetNo))
length(unique(yftdiet$TripSetPredNo))
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification
# Residual analysis
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo")
library(geoR)
# Residual analysis
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo")
str(yft.pr)
# Residual analysis
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
# Residual analysis
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo")
Omat <- formOmat(object$data, ID = predID)
str(Omat)
head(Omat)
pp <- predict(object, type = "prob", pred.type = "predator",
predatorID = predID, plot = FALSE)
str(pp)
head(pp)
dim(pp)
resids <- Distance(O = Omat[,(ncol(Omat)-ncol(pp)+1):ncol(Omat)],
P = pp, type = "Hellinger")
resids
names(resids)
spdat <- data.frame(Lon = Omat$Lon, Lat = Omat$Lat)
id <- (1:nrow(spdat))[apply(spdat, 1, function(x) any(is.na(x)))]
length(id) == 0
v.res <- variog(coords = spdat, data = resids$Dist)
v.res
names(v.res)
v_df <- data.frame(distance = v.res$u, semivariance = v.res$v)
v_df
semi_plot <- ggplot(v_df, aes(distance, semivariance)) + geom_point(size = 2) + xlim(0, max(v_df$distance)/2) +
theme_bw() + ggtitle("Variogram of Residuals")
semi_plot
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
# Residual analysis
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo")
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
library(foreach)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
yft.bag
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
library(abind)
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
yft.bag.resid
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
semi_plot
print(semi_plot)
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
# Bagging with spatial bootstrapping ngrids = 10
yft.bag.S10 <- bagging(Group ~  Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minbucket = 10,
spatial = list(fit = TRUE, sizeofgrid = 10, LonID = "Lon",
LatID = "Lat"), cp = 0.001, nBaggs = 10,
predID = "TripSetPredNo")
yft.bag.S10.resid <- resids(yft.bag.S10, LonID = "Lon", LatID = "Lat",
predID = "TripSetPredNo", plot = TRUE)
# Explore Bagged Predictions (sends the plot to a pdf file)
yft.bag.l <- link(x = yft.bag, object = yft.pr, LatID = "Latitude", LonID = "Longitude",
plot = TRUE, oob = TRUE, mfrow = c(2,2))
source('C:/Offline_Files/Github_Repos/diet/R/link.r')
source('C:/Offline_Files/Github_Repos/diet/R/link.r')
# extract the plot and plot to screen (hard to access individual plots)
yft.bag.l$m_bp
# Interactive plots
valB <- grab(yft.bag, LatID = "Lat", LonID = "Lon",
display.object = yft.pr, node.cols = node.colsY, cex = 0.8, oob = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Interactive plots
valB <- grab(yft.bag, LatID = "Lat", LonID = "Lon",
display.object = yft.pr, node.cols = node.colsY, cex = 0.8, oob = TRUE)
mapxlim
mapylim
bag.map <- link(object, subtree, LatID, LonID,  mapxlim, mapylim, oob = oob, plot = FALSE)
args(link)
bag.map <- link(object, subtree, LatID, LonID,  oob = oob, plot = FALSE)
nodestats <- explore.bag(bag.map, nID, cols = node.cols,
showtitle = FALSE, axis.side = 4, cex = cex, ylim = ylim)
ylim
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Interactive plots
valB <- grab(yft.bag, LatID = "Lat", LonID = "Lon",
display.object = yft.pr, node.cols = node.colsY, cex = 0.8, oob = TRUE)
ggplot2::ggsave("bootplot.pdf", valB$plots$m_plots, width = 12, height = 7)
valB$plots$m_plots
valB$plots$map
# Partial Dependence Plots
#Partial dependence plots for factors:
## Quarter
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
# plot to window
p_quarter
ggplot2::ggsave("quarter_fp.pdf", p_quarter, width = 8, height = 6)
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
p_year
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
palette
length(palette)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
partdep(object = yft.bag, Xvar = c("Lon", "Lat"), plotmap = TRUE)
