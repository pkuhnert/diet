node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
`Q`
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
loss <- object$frame$dev[as.integer(i)]/object$frame$wt[as.integer(i)]
loss
explore(object = object, pred=pred, loss = loss, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
i
loss <- object$frame$dev[as.integer(i)]/object$frame$wt[as.integer(i)]
explore(object = object, pred=pred, loss = loss, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
pred.node <- pred[pred.where == paste(node),]
pred.node
pred.node.m <- apply(pred.node, 2, mean)
pred.node.m
bars <- barplot(pred.node.m, plot = FALSE)
bars
preyO <- 1:length(pred.node.m)
prey0
preyO
data.frame(pred.node)
names(data.frame(pred.node))
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
ylim <- c(-0.05,1.05)
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
pred.node.m)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO)))
p
reorder(names(data.frame(pred.node)),preyO)
names(data.frame(pred.node))
preyO
pred.node.m
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
preyO <- 1:length(pred.node.m)
reorder(names(data.frame(pred.node)),preyO)
pred.node.m
prey.node
pred.node
class(pred.node)
pred.node.m <- apply(as.matrix(pred.node), 2, mean)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
preyO <- 1:length(pred.node.m)
reorder(names(data.frame(pred.node))
, preyO
)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO)))
pred.node.m
reorder(names(data.frame(pred.node)),preyO)
x = reorder(names(data.frame(pred.node)),preyO)
length(x)
reorder(cols, preyO))
reorder(cols, preyO)
cols
preyO
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
preyO <- 1:length(pred.node.m)
cols
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
node.cols
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
node.cols
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
preyO <- 1:length(pred.node.m)
reorder(cols, preyO))
reorder(cols, preyO)
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob")
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
yft.pred.obs
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class", node.cols = node.colsY)   # predicted classification
yft.predC
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
source('C:/Offline_Files/Github_Repos/diet/R/Distance.r')
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
library(geoR)
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 13 September 2018
#------------------------------------------------------
library(diet)
data(yftDMraw)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
data(PreyTaxonSort)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, check = TRUE)
library(spaMM)
data("worldcountries")
ls()
WorldCountries <- WorldCountries
WorldCountries <- worldcountries
?save
worldcountries <- WorldCountries
save(worldcountries, file = "worldcountries.RData")
plot
link
?data
?data
library(rpart)
search()
objects(2)
pred.rpart
rpart.class
rpart:::rpart.class
rpart:::rpart.anova
rpart:::rpart.poisson
rpartco
rpart:::rpartco
pred.rpart
rpart:::pred.rpart
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
source('C:/Offline_Files/Github_Repos/diet/R/link.r')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
prune.rpart
prune.dpart
library(diet)
yftpp2 <- read.pp(filenm = "yftPPraw.csv",
labels = list(PredatorL = "TripSetPredNo", TripSetL = "TripSetNo",
SpeciesL = "Family", FullnessL = "Fullness",
DateL = "Date", WeightL = "PropW", PreyGrpL = "Family"),
Datef = "%m/%d/%Y", p = 0.01,
Xvars = c("Lat", "Lon", "Year", "Quarter", "Length", "SST"))
# Option 2: Reading in a predator-prey matrix
write.csv(yftPPraw, file = "yftPPraw.csv", row.names = FALSE)
yftpp2 <- read.pp(filenm = "yftPPraw.csv",
labels = list(PredatorL = "TripSetPredNo", TripSetL = "TripSetNo",
SpeciesL = "Family", FullnessL = "Fullness",
DateL = "Date", WeightL = "PropW", PreyGrpL = "Family"),
Datef = "%m/%d/%Y", p = 0.01,
Xvars = c("Lat", "Lon", "Year", "Quarter", "Length", "SST"))
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(rpart)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(gridExtra)
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with prey taxa codes
head(dietPP)
# Create a predator column
dietPP$Predator <- as.factor(rep("YFT", nrow(dietPP)))
head(dietPP)
class(dietPP)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(GGally)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(lattice)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(reshape2)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(spaMM)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(mgcv)
r
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(raster)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(sp)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(rasterVis)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
names(explore.diet)
explore.diet$dataS1
explore.diet$dataS2
explore.diet$expl1
explore.diet$plotSpComp # Species composition
explore.diet$smplot
# Assigning prey colours for default palette
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, check = FALSE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with Group assigned prey taxa codes
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY)
class(yft.dp)
library(rpart.plot)
plot(yft.dp, node.cols=node.colsY)
summary(yft.dp)
print(yft.dp, setID = "TripSetNo")
yft.pr <- prune(yft.dp, se = 1)
plot(yft.pr, node.cols = node.colsY)
# Variable importance ranking
vi <- importance(yft.pr)
# Maps of diversity
# Diversity index
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon")
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
library(geoR)
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
title(main = "Variogram of Residuals (CT)")
class(dietPP)
tmpdat
worldcountries
save(worldcountries, file = "worldcountries.RData")
library(ggplot2)
borders
terrain.colors
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
sp.polygons
search()
library(latticeExtra)
search()
objects(2)
summary
?summary
worldcountries
class(worldcountries)
?arrow
?foreach
install.packages("foreach")
?prp
?rpart.plot::prp
library(diet)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(diet)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   #
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 19 September 2018
#------------------------------------------------------
devtools::install_github("pkuhnert/diet")
install.packages("spaMM")
install.packages("spaMM")
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 19 September 2018
#------------------------------------------------------
devtools::install_github("pkuhnert/diet")
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
source('C:/Offline_Files/Github_Repos/diet/R/apc.r')
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
str(yftpp1)
pal
