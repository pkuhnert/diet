class(dietPP)
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
LonID
mapylim
database
PredSpID
expl3 <- MapPrey(x, LonID, LatID, mapxlim, mapylim, database)
expl3
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
plot(explore.diet$expl3) # doesn't plot
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
expl3
plot(expl3)
str(expl3)
class(expl3)
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
expl3
expl3
expl3
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
expl3
expl3
plot(expl3)
expl2
expl3
plot(expl4)
PredSpID
x
expl3
print(expl3)
plot(expl3)
source('C:/Offline_Files/Github_Repos/diet/R/MapPrey.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
map1[[1]]
length(unpreyID)
map1[[12]]
map1[[10]]
expl4 <- do.call(grid.arrange, map1)
expl4
plot(expl4)
expl4
expl4
class(expl4)
plot(expl4)
plot.gtable(expl14)
grid.draw(expl14)
library(grid)
grid.draw
grid.draw(expl4)
source('C:/Offline_Files/Github_Repos/diet/R/MapPrey.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
expl3
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
explore.diet$expl3
source('C:/Offline_Files/Github_Repos/diet/R/MapPrey.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
explore.diet$expl3
grid.draw(explore.diet$expl3)
grid::grid.draw(explore.diet$expl3) # doesn't plot
print(explore.diet$plotSpComp) # Species composition
print(explore.diet$smplot)
?print
explore.diet$smplot
?print
explore.diet$plotSpComp
# Assigning prey colours for default palette
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with Group assigned prey taxa codes
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY, uniform = TRUE)
library(plot.rpart)
library(rpart.plot)
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY, uniform = TRUE)
summary(yft.dp)
print(yft.dp, setID = "TripSetNo")
yft.pr <- prune(yft.dp, se = 1)
plot(yft.pr, node.cols = node.colsY)
plot(yft.pr, node.cols = node.colsY, uniform = FALSE)
# Variable importance ranking
vi <- importance(yft.pr)
# Maps of diversity
# Diversity index
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon")
D
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1)
# predict distribution of prey composition for each predator
# (No plot here, just predictions)
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
head(yft.predator)
dim(yft.predator)
# predict distribution of prey composition for each observation
# (No plot here, just predictions)
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
head(yft.pred.obs)
dim(yft.pred.obs)
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification + plot
# Residual analysis # doesn't produce the plot just outputs text to the screen
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo", plot = TRUE)
library(geoR)
# Residual analysis # doesn't produce the plot just outputs text to the screen
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo", plot = TRUE)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
## need to fix reference to tree package - place in Description and imports
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
library(foreach)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
## need to fix reference to tree package - place in Description and imports
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
library(abind)
yft.bag.resid <- resids(yft.bag, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE)
# Explore Bagged Predictions (sends the plot to a pdf file)
yft.bag.l <- link(x = yft.bag, object = yft.pr, LatID = "Latitude", LonID = "Longitude",
plot = TRUE, oob = TRUE)
# extract the plot and plot to screen (hard to access individual plots)
yft.bag.l$m_bp
# Interactive plots
valB <- grab(yft.bag, LatID = "Lat", LonID = "Lon",
display.object = yft.pr, node.cols = node.colsY, cex = 0.8, oob = TRUE)
# print to screen - may not look nice
valB$plots$m_plots
valB$plots$map
# Partial Dependence Plots
#Partial dependence plots for factors:
## Quarter
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
# Partial Dependence Plots
#Partial dependence plots for factors:
## Quarter
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
# plot to window
p_quarter
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
p_year
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
## Quarter
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
# plot to window
p_quarter
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
pred <- predict(object$baggs[[1]], dat, type = "prob",
plot = FALSE)
for (i in 2:length(object$baggs)) pred <- pred + predict(object$baggs[[i]],
dat, type = "prob", plot = FALSE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
options(warn = 0)
!is.null(Yvar)
is.null(ncol(predcN))
mat <- mat.L <- mat.U <- data.frame(matrix(NA, ncol = ncol(predcN),
nrow = length(unique(X))))
ncol(predcN)
i <- 1
mat[, i] <- tapply(predcN[, i], X, mean)
mat.L[, i] <- tapply(predcN[, i], X, function(x) quantile(x,
0.1))
mat.U[, i] <- tapply(predcN[, i], X, function(x) quantile(x,
0.9))
mat
names(mat) <- names(predcN)
names(mat.L) <- names(predcN)
names(mat.U) <- names(predcN)
is.null(ylim)
ylim <- c(0, 1)
is.factor(X)
se.fit
# construct dataset for plotting
mat_melt <- melt(mat)
mat_melt
names(mat_melt)[2] <- "mean"
mat_lci <- melt(mat.L)
mat_uci <- melt(mat.U)
# add a LCI column to bpred
id <- match(row.names(mat_lci), row.names(mat_melt))
mat_melt$lci <- mat_lci$value[id]
# add a UCI column to bpred
id <- match(row.names(mat_uci), row.names(mat_melt))
mat_melt$uci <- mat_uci$value[id]
# add categorical information
mat_melt$category <- rep(row.names(mat), ncol(mat_melt))
mat_melt
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
Xnew
matN[,i]
plot(Xnew, matN[, i], type = "l", main = nms[i],
ylim = ylim, xlab = xlabel, ylab = "Proportion")
xx <- c(Xnew, rev(Xnew))
yy <- c(matL[, i], rev(matU[, i]))
polygon(xx, yy, col = "light grey", border = NA)
lines(Xnew, matN[, i])
rug(X[dat$Group == levels(dat$Group)[i]])
lp_dat <- data.frame(x = Xnew, y = matN[,i])
lp <- ggplot(aes_string("x", "y"), data = lp_dat) + geom_line()
lp
ylim
lp <- ggplot(aes_string("x", "y"), data = lp_dat) + geom_line() + ylim(0,1)
lp
xx
length(xx)
dim(lp_dat)
length(yy)
lp <- ggplot(aes_string("x", "y"), data = lp_dat) + geom_line() + ylim(0,1) +
xlab(xlabel) + ylab("Proportion") + ggtitle(nms[i])
lp
lp_dat <- data.frame(x = Xnew, y = matN[,i])
lp <- ggplot(aes_string("x", "y"), data = lp_dat) + geom_line() + ylim(0,1) +
xlab(xlabel) + ylab("Proportion") + ggtitle(nms[i])
xx <- c(Xnew, rev(Xnew))
yy <- c(matL[, i], rev(matU[, i]))
poly_dat <- data.frame(xx = xx, yy = yy)
lp_se <- lp + geom_polygon(aes_string("xx", "yy"))
lp_se
lp_se <- lp + geom_polygon(aes_string("xx", "yy"), data = poly_dat)
lp_se
lp_se <- lp + geom_polygon(aes_string("xx", "yy"), col = "light grey", alpa = 0.5, data = poly_dat)
lp_se <- lp + geom_polygon(aes_string("xx", "yy"), col = "light grey", alpha = 0.5, data = poly_dat)
lp_se
poly_dat
polygon(xx, yy, col = "light grey", border = NA)
plot(Xnew, matN[, i], type = "l", main = nms[i],
ylim = ylim, xlab = xlabel, ylab = "Proportion")
polygon(xx, yy, col = "light grey", border = NA)
lp <- lp + geom_polygon(aes_string("xx", "yy"), col = "light grey",
alpha = 0.5, data = poly_dat) +
}
m_p[[i]] <- lp + geom_rug(X[dat$Group == levels(dat$Group)[i]])
lp + geom_rug(X[dat$Group == levels(dat$Group)[i]])
X[dat$Group == levels(dat$Group)[i]]
rug_dat <- data.frame(x = X[dat$Group == levels(dat$Group)[i]])
lp + geom_rug(aes_string(x = "x", y = NULL), data = rug_dat )
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
lp
lp + geom_rug(aes_string(x = "x", y = NULL), data = rug_dat )
rug_dat <- data.frame(x = X[dat$Group == levels(dat$Group)[i]])
lp + geom_rug(aes_string(x = "x", y = NULL), data = rug_dat )
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
length(pdC)
pdC
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
m_p <- marrangeGrob(grobs = pdC, nrow = 3, ncol = 3, top = "Partial Dependence Plot")
m_p
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
p_year
#Partial dependence plots for continuous variables:
p_length <- partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se.fit = TRUE)
p_length
## SST
p_SST <- partdep(object = yft.bag, Xvar = "SST", fact = FALSE, se = TRUE)
p_SST
#Partial dependence plots for interactions (Latitude and Longitude):
#pdf("pdint-ex.pdf")
partdep(object = yft.bag, Xvar = c("Lon", "Lat"), plotmap = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/plot.diet.r')
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
head(dietPP)
# Create a predator column
dietPP$Predator <- as.factor(rep("YFT", nrow(dietPP)))
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
# now use yftdiet
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
explore.diet$expl1
explore.diet$expl2
grid::grid.draw(explore.diet$expl3)
explore.diet$plotSpComp # Species composition
explore.diet$smplot
# Residual analysis
### doesn't produce the plot just outputs text to the screen
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo", plot = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
# Residual analysis
### doesn't produce the plot just outputs text to the screen
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo", plot = TRUE)
# Interactive plots
valB <- grab(yft.bag, LatID = "Lat", LonID = "Lon",
display.object = yft.pr, node.cols = node.colsY, cex = 0.8, oob = TRUE)
args(grab.bag)
library(diet)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with "Group" assigned prey taxa codes
head(dietPP)
# Option 2: Reading in a predator-prey matrix
write.csv(yftPPraw, file = "yftPPraw.csv", row.names = FALSE)
yftpp2 <- read.pp(filenm = "yftPPraw.csv",
labels = list(PredatorL = "TripSetPredNo", TripSetL = "TripSetNo",
SpeciesL = "Family", FullnessL = "Fullness",
DateL = "Date", WeightL = "PropW", PreyGrpL = "Family"),
Datef = "%m/%d/%Y", p = 0.01,
Xvars = c("Lat", "Lon", "Year", "Quarter", "Length", "SST"))
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with prey taxa codes
head(dietPP)
# Create a predator column
dietPP$Predator <- as.factor(rep("YFT", nrow(dietPP)))
head(dietPP)
# Option 2: Reading in a predator-prey matrix
write.csv(yftPPraw, file = "yftPPraw.csv", row.names = FALSE)
yftpp2 <- read.pp(filenm = "yftPPraw.csv",
labels = list(PredatorL = "TripSetPredNo", TripSetL = "TripSetNo",
SpeciesL = "Family", FullnessL = "Fullness",
DateL = "Date", WeightL = "PropW", PreyGrpL = "Family"),
Datef = "%m/%d/%Y", p = 0.01,
Xvars = c("Lat", "Lon", "Year", "Quarter", "Length", "SST"))
pal <- c(topo.colors(4)[1:2], heat.colors(4)[1:2], terrain.colors(16)[1:8])
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp2, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
rpart:::rpart.class
rpart:::rpart.anova
rpart:::rpart.poisson
rpart:::rpartco
rpart:::pred.rpart
search()
library(rpart)
search()
objects(2)
rprt_env
rpart:::rpart_env
format
formatg
rpart:::formatg
rpart:::plot.rpart
pred.rpart
rpart:::pred.rpart
search()
library(rpart)
search()
objects(2)
rpart.internalFns
remotes::install_github("dirkschumacher/armacmp")
remotes::install_github("dirkschumacher/armacmp")
