explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
library(rasterVis)
#------------------------------------------------------------
# Exploratory analysis of diet data
#------------------------------------------------------------
explore.diet <- plot(x = dietPP, LonID = "Lon", LatID = "Lat",
Xvar = c("Quarter", "Year", "SST", "Length", "Lat", "Lon"),
PredSpID = "Predator", mapxlim = c(-125, -75), mapylim = c(0, 30),
SmXvar = c("SST", "Length"), PredIDno = "TripSetPredNo", col = "gold3",
Factor = "Predator", prey.cols = node.colsY)
names(explore.diet)
explore.diet$dataS1
explore.diet$dataS2
explore.diet$expl1
explore.diet$plotSpComp # Species composition
explore.diet$smplot
# Assigning prey colours for default palette
val <- apc(x = yftdiet, preyfile = PreyTaxonSort, check = FALSE)
node.colsY <- val$cols
dietPP <- val$x   # updated diet matrix with Group assigned prey taxa codes
# Fitting the classification tree
yft.dp <- dpart(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001)
plot(yft.dp, node.cols=node.colsY)
class(yft.dp)
library(rpart.plot)
plot(yft.dp, node.cols=node.colsY)
summary(yft.dp)
print(yft.dp, setID = "TripSetNo")
yft.pr <- prune(yft.dp, se = 1)
plot(yft.pr, node.cols = node.colsY)
# Variable importance ranking
vi <- importance(yft.pr)
# Maps of diversity
# Diversity index
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon")
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
library(geoR)
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
title(main = "Variogram of Residuals (CT)")
class(dietPP)
tmpdat
worldcountries
save(worldcountries, file = "worldcountries.RData")
library(ggplot2)
borders
terrain.colors
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
sp.polygons
search()
library(latticeExtra)
search()
objects(2)
summary
?summary
worldcountries
class(worldcountries)
?arrow
?foreach
install.packages("foreach")
?prp
?rpart.plot::prp
library(diet)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(diet)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
dietPP <- val$x   #
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 19 September 2018
#------------------------------------------------------
devtools::install_github("pkuhnert/diet")
install.packages("spaMM")
install.packages("spaMM")
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 19 September 2018
#------------------------------------------------------
devtools::install_github("pkuhnert/diet")
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
pal <- c(topo.colors(10)[1:2], heat.colors(10)[1:2], terrain.colors(25)[1:8])
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
node.colsY <- val$cols
source('C:/Offline_Files/Github_Repos/diet/R/apc.r')
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, palette = pal, check = TRUE)
str(yftpp1)
pal
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/bagging.r')
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
library(rpart)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
mapxlim
mapylim
?grid.arrange
library(gridExtra)
?grid.arrange
library(diet)
library(diet)
# Explore Bagged Predictions (sends the plot to a pdf file)
yft.bag.l <- link(x = yft.bag, object = yft.pr, LatID = "Latitude", LonID = "Longitude",
plot = TRUE, oob = TRUE, mfrow = c(2,2))
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/bagging.r')
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
library(foreach)
#--------------------------------- Bagging -------------------------------------------#
#
#-------------------------------------------------------------------------------------#
# Bagging with no spatial bootstrapping
yft.bag <- bagging(Group ~ Lat + Lon + Year + Quarter + SST  + Length,
data = dietPP, weights = W, minsplit = 10,
cp = 0.001, nBaggs = 10, predID = "TripSetPredNo")
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
#Partial dependence plots for continuous variables:
partdep(object = yft.bag, Xvar = "Length", fact = FALSE, se = TRUE)
partdep(object = yft.bag, Xvar = c("Lon", "Lat"), plotmap = TRUE)
library(mgcv)
partdep(object = yft.bag, Xvar = c("Lon", "Lat"), plotmap = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
dim(mat)
head(mat)
class(mat)
mat_melt <- melt(mat)
library(reshape2)
mat_melt <- melt(mat)
head(mat_melt)
?options
head(mat.L)
mat_melt <- melt(mat)
mat_lci <- melt(mat.L)
mat_uci <- melt(mat.U)
head(mat_melt)
# add a LCI column to bpred
id <- match(row.names(mat_lci), row.names(mat_melt))
mat_melt$lci <- mat_lci$value[id]
# add a UCI column to bpred
id <- match(row.names(mat_uci), row.names(mat_melt))
mat_melt$uci <- mat_uci$value[id]
# add node information
bpred$node <- rep(row.names(bpred.m), ncol(bpred.m))
head(mat_melt)
head(mat)
# add categorical information
mat_melt$cateogry <- rep(row.names(mat), ncol(mat_melt))
head(mat_melt)
?arrow
args(arrow)
pdF[[i]] <- ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
+ geom_point(aes(x = variable, y = mean), col = "white", size = 1, shape = "-") +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
pdF[[i]] <- ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
+ geom_point(aes(x = variable, y = mean), col = "white", size = 1, shape = "-") +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
pdF[[i]] <- ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = variable, y = mean), col = "white", size = 1, shape = "-") +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
pdF <- list()
ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = variable, y = mean), col = "white", size = 1, shape = "-") +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90))
ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90, length = 0.1))
ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = variable, y = mean))
head(mat_melt)
names(mat_melt)[2] <- "mean"
head(mat_melt)
ggplot(mat_melt) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = variable, y = mean))
mat
head(mat_melt)
mat_melt
mat
un_prey <- names(mat)
un_prey <- names(mat)
mat_melt
# construct dataset for plotting
mat_melt <- melt(mat)
names(mat_melt)[2] <- "mean"
mat_lci <- melt(mat.L)
mat_uci <- melt(mat.U)
# add a LCI column to bpred
id <- match(row.names(mat_lci), row.names(mat_melt))
mat_melt$lci <- mat_lci$value[id]
# add a UCI column to bpred
id <- match(row.names(mat_uci), row.names(mat_melt))
mat_melt$uci <- mat_uci$value[id]
# add categorical information
mat_melt$cateogry <- rep(row.names(mat), ncol(mat_melt))
mat_melt
mat
# construct dataset for plotting
mat_melt <- melt(mat)
mat_melt
mat
melt
# construct dataset for plotting
mat_melt <- melt(mat)
mat_melt
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
partdep.bag
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
i
mat
mat_melt
tmp <- subset(mat_melt, nms[i])
class(mat)
mat
melt(mat)
reshape2::melt(mat)
reshape::melt(mat)
library(reshape)
reshape2::melt
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
tmp <- subset(mat_melt, nms[i])
melt
mat_melt
nms[i]
tmp <- subset(mat_melt, variable == nms[i])
tmp
ggplot(tmp) +
geom_segment(aes(x = variable, y = lci, xend = variable, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = variable, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
i
tmp
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
tmp <- subset(mat_melt, variable == nms[i])
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90))
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
tmp <- subset(mat_melt, variable == nms[i])
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
par(ask = FALSE)
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
tmp
# add categorical information
mat_melt$category <- rep(row.names(mat), ncol(mat_melt))
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
par(ask = FALSE)
tmp <- subset(mat_melt, variable == nms[i])
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1, lineend = "butt", arrow = arrow(angle = 90)) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 2, lineend = "butt", arrow = arrow(angle = 90,
length=unit(0.3,"cm"),
ends = "both")) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1.5, lineend = "butt", arrow = arrow(angle = 90,
length=unit(0.3,"cm"),
ends = "both")) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1.5, lineend = "butt", arrow = arrow(angle = 0,
length=unit(0.3,"cm"),
ends = "both")) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1.5, lineend = "butt", arrow = arrow(angle = 90,
length=unit(0.3,"cm"),
ends = "both")) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle("Title here") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 1))
ggplot(tmp) +
geom_segment(aes(x = category, y = lci, xend = category, yend = uci),
size = 1.5, lineend = "butt", arrow = arrow(angle = 90,
length=unit(0.3,"cm"),
ends = "both")) +
geom_point(aes(x = category, y = mean)) +
xlab("") + ylab("Proportion") + theme_bw() + ggtitle(paste(nms[i])) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 1))
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
m_bp
dim(mat)
for (i in 1:ncol(mat)) {
val <- barplot(mat[, i], names.arg = "", main = nms[i],
ylim = ylim, ylab = "Proportion", axes = FALSE)
axis(side = 2)
x.nms <- levels(X)
if (any(sapply(x.nms, nchar) > 3))
mtext(side = 1, x.nms, at = val, adj = 1,
cex = 0.6, las = 2, line = 1)
else mtext(side = 1, x.nms, at = val, adj = 0.5,
cex = 0.6, line = 1)
}
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
ggsave
?ggsave
ggplot2::ggsave("quarter_fp.pdf", p_quarter, width = 8, height = 6)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
# plot to window
p_quarter
ggplot2::ggsave("quarter_fp.pdf", p_quarter, width = 8, height = 6)
source('C:/Offline_Files/Github_Repos/diet/R/partdep.r')
# Partial Dependence Plots
#Partial dependence plots for factors:
p_quarter <- partdep(object = yft.bag, Xvar = "Quarter", fact = TRUE, se = TRUE)
ggplot2::ggsave("quarter_fp.pdf", p_quarter, width = 8, height = 6)
## Year
p_year <- partdep(object = yft.bag, Xvar = "Year", fact = TRUE, se = TRUE)
ggplot2::ggsave("year_fp.pdf", p_quarter, width = 8, height = 6)
