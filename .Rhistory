source('C:/Offline_Files/Github_Repos/diet/R/diversity.r')
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon",
mapxlim = mapxlim, mapylim = mapylim, cex.axis = 1.1)
# Maps of diversity
# Diversity index
D <- diversity(object = yft.pr, LatID = "Lat", LonID = "Lon")
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Plot 3: barplot
subpred <- predict(subtree, type = "prob", plot = FALSE)
subpred.where <- subtree$where
subpred.where
# Calculating summary statistics about the node
pred.node <- subpred[subpred.where == paste(pred.where),]
pred.node.m <- apply(pred.node, 2, mean)
node <-  as.integer(row.names(subtree$frame)[as.integer(pred.where)])
nobs <- subtree$frame$n[as.integer(pred.where)]
is.null(setID)
nsets  <- length(unique(subtree$data[subpred.where == as.integer(pred.where),][setID]))
nsets
npredators <- subtree$frame$wt[as.integer(pred.where)]
nprey <- length(pred.node.m[pred.node.m > 0])
dev <- subtree$frame$dev[as.integer(pred.where)]
loss <- subtree$frame$dev[as.integer(pred.where)]/subtree$frame$wt[as.integer(pred.where)]
dev
loss
pclass <- with(subtree, levels(data$Group)[frame[paste(node),]$yval])
explore(object = subtree, pred = subpred, pred.where = subpred.where, loss = loss,
node = pred.where, cols = node.cols, showtitle = FALSE, cex = cex)
explore
class(subtree)
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
explore(object = subtree, pred = subpred, pred.where = subpred.where, loss = loss,
node = pred.where, cols = node.cols, showtitle = FALSE, cex = cex)
pred.node <- pred[pred.where == paste(node),]
length(pred.node) == 0
is.null(nrow(pred.node))
pred.node.m <- apply(pred.node, 2, mean)
pred.node.m
showtitle
n <- length(pred.node.m)
bars <- barplot(pred.node.m, plot = FALSE)
bars
x <- as.vector(bars)
labels
nms <- names(pred.node.m)
nms
names(pred.node.m) <- NULL
missing(cols)
missing(ylim)
ylim <- c(-0.05,1.05)
preyO <- 1:length(pred.node)
p <- ggplot(mapping = aes(x = reorder(names(pred.node),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
reorder(names(pred.node),preyO)
names(pred.node)
preyO
pred.node <- pred[pred.where == paste(node),]
pred.node
names(pred.node)
dim(pred)
head(pred)
pred.node <- pred[pred.where == paste(node),]
head(pred.node)
names(pred.node)
names(pred)
names(data.frame(pred))
names(data.frame(pred.node))
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
print(p)
reorder(names(data.frame(pred.node)),preyO)
names(data.frame(pred.node))
preyO
dim(pred.node)
head(pred.node)
pred.node
pred.where == paste(node)
pred[pred.where == paste(node),]
pred.node.m
preyO <- 1:length(pred.node.m)
prey0
prey0
preyO
reorder(names(data.frame(pred.node)),preyO)
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
library(grid)
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
val <- grabmulti(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
class(yft.pr)
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
type == "class" && nclass > 0
type == "prob" && nclass > 0L
pred <- frame$yval2[where, 1L + nclass + 1L:nclass, drop = FALSE]
dimnames(pred) <- list(names(where), ylevels)
plot
dev.cur() == 1)
dev.cur() == 1
par(mfrow=c(2,2))
names(table(where))
explore(object = object, pred=pred, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
explore(object = object, pred=pred, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
explore(object = object, pred=pred, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
node
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
names(table(where))
i <- "5"
explore(object = object, pred=pred, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
node
pred.node <- pred[pred.where == paste(node),]
pred
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
pred
head(pred)
names(table(where))
i <- "5"
explore(object = object, pred=pred, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
pred
pred.node <- pred[pred.where == paste(node),]
pred.node
pred.node.m <- apply(pred.node, 2, mean)
pred.node.m
showtitle
par(mar = c(6,4,4,2)+0.1)
n <- length(pred.node.m)
bars <- barplot(pred.node.m, plot = FALSE)
bars
x <- as.vector(bars)
labels
nms <- names(pred.node.m)
nms
names(pred.node.m) <- NULL
missing(cols)
cols <- "grey"
missing(ylim)
ylim <- c(-0.05,1.05)
preyO <- 1:length(pred.node.m)
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
print(p)
loss
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
loss <- object$frame$dev[as.integer(where)]/object$frame$wt[as.integer(where)]
loss
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
loss
yft.pr
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
loss
as.integer(pred.where)
nID
source('C:/Offline_Files/Github_Repos/diet/R/grab.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
`Q`
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
loss <- object$frame$dev[as.integer(i)]/object$frame$wt[as.integer(i)]
loss
explore(object = object, pred=pred, loss = loss, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
i
loss <- object$frame$dev[as.integer(i)]/object$frame$wt[as.integer(i)]
explore(object = object, pred=pred, loss = loss, pred.where=where,
node=i, showtitle = TRUE, cex = cex)
pred.node <- pred[pred.where == paste(node),]
pred.node
pred.node.m <- apply(pred.node, 2, mean)
pred.node.m
bars <- barplot(pred.node.m, plot = FALSE)
bars
preyO <- 1:length(pred.node.m)
prey0
preyO
data.frame(pred.node)
names(data.frame(pred.node))
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
ylim <- c(-0.05,1.05)
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
pred.node.m)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO)))
p
reorder(names(data.frame(pred.node)),preyO)
names(data.frame(pred.node))
preyO
pred.node.m
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
preyO <- 1:length(pred.node.m)
reorder(names(data.frame(pred.node)),preyO)
pred.node.m
prey.node
pred.node
class(pred.node)
pred.node.m <- apply(as.matrix(pred.node), 2, mean)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Exploring nodes of the treeazSD
#The following piece of code is interactive. When the code is run, the user will be
# asked to select a node for interrogation and exploration.
val <- grab(object = yft.pr, LatID = "Lat", LonID = "Lon", setID = "TripSetNo",
node.cols = node.colsY, cex = 1, mapxlim = mapxlim, mapylim = mapylim,
mapcol = "gold3")
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
preyO <- 1:length(pred.node.m)
reorder(names(data.frame(pred.node))
, preyO
)
pred.node.m
p <- ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO))) +
scale_fill_manual(values = as.vector(cols), labels = names(cols), name = "Prey")  +
ylim(ylim) + xlab("") + ylab("Proportion") +
ggtitle(paste("Node ", row.names(object$frame)[as.integer(node)], "\n",
"Diet Composition (D=", round(loss, 3), ")", sep = "")) + theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1,1,1.5,1.2), "cm"))
p
ggplot(mapping = aes(x = reorder(names(data.frame(pred.node)),preyO),
y = pred.node.m)) +
geom_bar(stat = "identity", aes(fill = reorder(cols, preyO)))
pred.node.m
reorder(names(data.frame(pred.node)),preyO)
x = reorder(names(data.frame(pred.node)),preyO)
length(x)
reorder(cols, preyO))
reorder(cols, preyO)
cols
preyO
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
preyO <- 1:length(pred.node.m)
cols
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo")
node.cols
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
node.cols
source('C:/Offline_Files/Github_Repos/diet/R/predict.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
preyO <- 1:length(pred.node.m)
reorder(cols, preyO))
reorder(cols, preyO)
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Forming predictions
# predict distribution of prey composition for each predator
############### ISSUE HERE
yft.predator <- predict(yft.pr, type = "prob", pred.type = "predator",
predatorID = "TripSetPredNo", node.cols = node.colsY)
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob")
# predict distribution of prey composition for each observation
yft.pred.obs <- predict(yft.pr, type = "prob", node.cols = node.colsY)
yft.pred.obs
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class", node.cols = node.colsY)   # predicted classification
yft.predC
# predict classification  for each observation in the dataset
yft.predC <- predict(yft.pr, type = "class")   # predicted classification
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
source('C:/Offline_Files/Github_Repos/diet/R/resids.r')
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
source('C:/Offline_Files/Github_Repos/diet/R/Distance.r')
source('C:/Offline_Files/Github_Repos/diet/R/diet-Internal.r')
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
library(geoR)
# Residual analysis
######################## ERROR
yft.resid <- resids(yft.pr, LonID = "Lon", LatID = "Lat", predID = "TripSetPredNo",
plot = TRUE) # need to compute resids from bootstrapping
#------------------------------------------------------
# Diet Package Example
# Author: Petra Kuhnert & Leanne Duffy
# Date: 13 September 2018
#------------------------------------------------------
library(diet)
data(yftDMraw)
write.csv(yftDMraw, file = "yftDMraw.csv", row.names = FALSE)
yftpp1 <- read.dm(filenm = "yftDMraw.csv",
labels = list(FullnessL = "Fullness", DateL = "Date"),
Datef = "%m/%d/%Y", diet.ind.start = 12, p = 0.01)
data(PreyTaxonSort)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, check = TRUE)
library(ggplot2)
val <- apc(x = yftpp1, preyfile = PreyTaxonSort, check = TRUE)
